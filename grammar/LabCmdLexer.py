# Generated from grammar/LabCmdLexer.g4 by ANTLR 4.13.2
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        0,
        6,
        47,
        6,
        -1,
        6,
        -1,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        23,
        8,
        1,
        11,
        1,
        12,
        1,
        24,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        5,
        4,
        36,
        8,
        4,
        10,
        4,
        12,
        4,
        39,
        9,
        4,
        1,
        5,
        4,
        5,
        42,
        8,
        5,
        11,
        5,
        12,
        5,
        43,
        1,
        5,
        1,
        5,
        0,
        0,
        6,
        2,
        1,
        4,
        2,
        6,
        3,
        8,
        4,
        10,
        5,
        12,
        6,
        2,
        0,
        1,
        4,
        1,
        0,
        123,
        123,
        3,
        0,
        65,
        90,
        95,
        95,
        97,
        122,
        4,
        0,
        48,
        57,
        65,
        90,
        95,
        95,
        97,
        122,
        3,
        0,
        9,
        10,
        13,
        13,
        32,
        32,
        49,
        0,
        2,
        1,
        0,
        0,
        0,
        0,
        4,
        1,
        0,
        0,
        0,
        1,
        6,
        1,
        0,
        0,
        0,
        1,
        8,
        1,
        0,
        0,
        0,
        1,
        10,
        1,
        0,
        0,
        0,
        1,
        12,
        1,
        0,
        0,
        0,
        2,
        14,
        1,
        0,
        0,
        0,
        4,
        22,
        1,
        0,
        0,
        0,
        6,
        26,
        1,
        0,
        0,
        0,
        8,
        31,
        1,
        0,
        0,
        0,
        10,
        33,
        1,
        0,
        0,
        0,
        12,
        41,
        1,
        0,
        0,
        0,
        14,
        15,
        5,
        123,
        0,
        0,
        15,
        16,
        5,
        123,
        0,
        0,
        16,
        17,
        1,
        0,
        0,
        0,
        17,
        18,
        6,
        0,
        0,
        0,
        18,
        3,
        1,
        0,
        0,
        0,
        19,
        23,
        8,
        0,
        0,
        0,
        20,
        21,
        5,
        123,
        0,
        0,
        21,
        23,
        8,
        0,
        0,
        0,
        22,
        19,
        1,
        0,
        0,
        0,
        22,
        20,
        1,
        0,
        0,
        0,
        23,
        24,
        1,
        0,
        0,
        0,
        24,
        22,
        1,
        0,
        0,
        0,
        24,
        25,
        1,
        0,
        0,
        0,
        25,
        5,
        1,
        0,
        0,
        0,
        26,
        27,
        5,
        125,
        0,
        0,
        27,
        28,
        5,
        125,
        0,
        0,
        28,
        29,
        1,
        0,
        0,
        0,
        29,
        30,
        6,
        2,
        1,
        0,
        30,
        7,
        1,
        0,
        0,
        0,
        31,
        32,
        5,
        46,
        0,
        0,
        32,
        9,
        1,
        0,
        0,
        0,
        33,
        37,
        7,
        1,
        0,
        0,
        34,
        36,
        7,
        2,
        0,
        0,
        35,
        34,
        1,
        0,
        0,
        0,
        36,
        39,
        1,
        0,
        0,
        0,
        37,
        35,
        1,
        0,
        0,
        0,
        37,
        38,
        1,
        0,
        0,
        0,
        38,
        11,
        1,
        0,
        0,
        0,
        39,
        37,
        1,
        0,
        0,
        0,
        40,
        42,
        7,
        3,
        0,
        0,
        41,
        40,
        1,
        0,
        0,
        0,
        42,
        43,
        1,
        0,
        0,
        0,
        43,
        41,
        1,
        0,
        0,
        0,
        43,
        44,
        1,
        0,
        0,
        0,
        44,
        45,
        1,
        0,
        0,
        0,
        45,
        46,
        6,
        5,
        2,
        0,
        46,
        13,
        1,
        0,
        0,
        0,
        6,
        0,
        1,
        22,
        24,
        37,
        43,
        3,
        5,
        1,
        0,
        4,
        0,
        0,
        6,
        0,
        0,
    ]


class LabCmdLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    VARIABLE_MODE = 1

    VARIABLE_START = 1
    TEXT = 2
    VARIABLE_END = 3
    DOT = 4
    ID = 5
    WS = 6

    channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]

    modeNames = ["DEFAULT_MODE", "VARIABLE_MODE"]

    literalNames = ["<INVALID>", "'{{'", "'}}'", "'.'"]

    symbolicNames = [
        "<INVALID>",
        "VARIABLE_START",
        "TEXT",
        "VARIABLE_END",
        "DOT",
        "ID",
        "WS",
    ]

    ruleNames = ["VARIABLE_START", "TEXT", "VARIABLE_END", "DOT", "ID", "WS"]

    grammarFileName = "LabCmdLexer.g4"

    def __init__(self, input=None, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(
            self, self.atn, self.decisionsToDFA, PredictionContextCache()
        )
        self._actions = None
        self._predicates = None
